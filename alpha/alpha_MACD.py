# -*- coding: utf-8 -*-
"""alpha_MACD.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UIO0aLkdbxOfivGA4IrD98NKfXI6VDBy
"""

import pandas as pd
import numpy as np

class MACD:
    def __init__(self, df, target, fast_period=12, slow_period=26, signal_period=9, train_ratio = 0.8):
        self.df = df.copy()
        self.fast_period = fast_period
        self.slow_period = slow_period
        self.signal_period = signal_period
        self.target = target
        self.ratio = train_ratio
        
    def _calculate_ema(self, data, window):
        return data.ewm(span=window, adjust=False).mean()
    
    def _calculate_signal(self, data, period):
        macd = self._calculate_ema(data, period)
        signal = self._calculate_ema(macd, period)
        signal_ = ((2 * macd) - signal)
        return signal_
        
    def generate_signals(self):
        fast = self._calculate_signal(self.df['close'], self.fast_period)
        slow = self._calculate_signal(self.df['close'], self.slow_period)
        Ligne_MACD_Zero_Lag = (fast - slow)
        Ligne_signal = self._calculate_signal(Ligne_MACD_Zero_Lag, self.signal_period)
        MACD_Zero_Lag = (Ligne_MACD_Zero_Lag - Ligne_signal) 
        df['macd'] = MACD_Zero_Lag
        # return MACD_Zero_Lag

    def tune_macd(self):
      """
      tune the MACD alpha using grid search
      """
      # Define the train dataframe
      idx = int(self.df.shape[0] * self.ratio)
      dfnew = self.dfiloc[:idx]

      # Define the parameter ranges to search
      param_grid = {'fast_period': range(1, 21),
                    'slow_period': range(1, 21),
                    'signal_period': range(1, 21)}
      # Create a dataframe to store the results
      data = pd.DataFrame(columns=['fast_period', 'slow_period', 'signal_period', 'corr'])

      # Loop over all combinations of parameters
      for params in np.product(*param_grid.values()):
          # Create a MACD_alpha object with the current parameters
          alpha = MACD(dfnew, *params)
          # Add MACD to the dataframe
          alpha.generate_signals()
          train_df = alpha.get_dataframe()
          # Calculate the correlation between MACD and the target
          corr = abs(train_df['macd'].corr(train_df[target]))
          # Add the results to the dataframe
          data = data.append({'fast_period': params[0],
                          'slow_period': params[1],
                          'signal_period': params[2],
                          'corr': corr}, ignore_index=True)
          
      # Sort the dataframe by correlation
      data_ = data.sort_values(by='corr', ascending=False)
      # Return the top 5 results
      return data_.head(5)
    
    def get_dataframe(self):
        return self.df